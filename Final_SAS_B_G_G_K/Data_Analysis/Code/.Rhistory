"Total_Distance_per_Bus_Line",
"Total_Cycle_Time_per_Bus_Line",
"Bus_Count_per_Line_via_Tcycle",
"Total_Time_Break_per_Bus_Line",
"Parked_Car",
"Bus_Lane",
"People_Boarded_per_1_Minute_Intervals",
"People_Unboarded_per_1_Minute_Intervals",
"Scatter_Plot_of_Time_Differences",
"Scatter_Plot_of_People_Boarded",
"Scatter_Plot_of_People_Unboarded",
"Scatter_Plot_of_Time_in_Stop"
)
plot_objects <- list(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, pl13, pl14, pl15, pl16, pl17, pl18, pl19, pl20, pl21, pl22, pl23, pl24, pl25, pl26, pl27, pl28, pl29, pl30, pl31, pl32, pl33)
convert_and_save_plots(plot_objects, plot_names, output_directory)
####Interactive Plots####
# Define the function
convert_and_save_plots <- function(plot_objects, plot_names, output_dir) {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Check if plot_names matches the number of plot objects
if (length(plot_objects) != length(plot_names)) {
stop("The number of plot objects must match the number of plot names.")
}
# Loop through each plot object
for (i in seq_along(plot_objects)) {
plot <- plot_objects[[i]]
name <- plot_names[i]
# Check if it's a pie chart (using coord_polar)
if (inherits(plot, "gg") && "coord_polar" %in% class(plot$coordinates)) {
# Handle pie chart manually
# Transform ggplot pie chart to plotly pie chart
# Get the data from the ggplot object
plot_data <- plot$data
plot_data <- plot_data[!is.na(plot_data$fill), ]  # Remove NA in the fill variable
# Create a plotly pie chart
interactive_plot <- plot_ly(
data = plot_data,
labels = plot_data$fill,
values = plot_data$count,  # Use the count or whatever variable holds the pie values
type = 'pie'
)
} else {
# For other types of ggplot objects, convert directly to plotly
interactive_plot <- ggplotly(plot)
}
# Correctly create file path without folders
file_name <- file.path(output_dir, paste0(name, ".html"))
# Ensure the path is formatted correctly for your OS
file_name <- normalizePath(file_name, winslash = "/", mustWork = FALSE)
# Save the interactive plot as an HTML file
htmlwidgets::saveWidget(as_widget(interactive_plot), file = file_name, selfcontained = TRUE)
}
}
# Define the output directory
output_directory <- "E:/University/9ο ΕΞΑΜΗΝΟ/ΣΥΣΤΗΜΑΤΑ ΑΣΤΙΚΩΝ ΣΥΓΚΟΙΝΩΝΙΩΝ/ERGASIA EKSAMHNOU/Final_SAS_B_G_G_K_Repo/Final_SAS_B_G_G_K/Data_Analysis/Plots/Interactive_Plots"
# Define plot names
plot_names <- c(
"Total_Number_of_People_Boarded_vs_Unboarded",
"Average_Number_of_People_Boarded_vs_Unboarded",
"Distribution_of_People_Boarded_and_Unboarded",
"Max_People_Boarded_Per_Bus_Line",
"Average_People_Boarded_Per_Bus_Line",
"Sum_of_People_Boarded_per_Bus_Line",
"Box_Plot_of_People_Boarded_per_Line",
"Max_People_Unboarded_per_Bus_Line",
"Average_People_Unboarded_per_Bus_Line",
"Sum_of_People_Unboarded_per_Bus_Line",
"Box_Plot_of_People_Unboarded_per_Line",
"Average_Time_per_Stop_per_Bus_Line",
"Max_Time_per_Stop_per_Bus_Line",
"Total_Time_per_Stop_per_Bus_Line",
"Number_of_Skips_per_Bus_Line",
"Number_of_Buses",
"Frequency_per_Bus_Line",
"Time_Distance_per_Bus_Line",
"Bus_Count_per_Bus_Line",
"Sum_of_Absolute_Time_Difference_per_Bus_Line",
"Average_Speed_per_Bus_Line",
"Total_Distance_per_Bus_Line",
"Total_Cycle_Time_per_Bus_Line",
"Bus_Count_per_Line_via_Tcycle",
"Total_Time_Break_per_Bus_Line",
"Parked_Car",
"Bus_Lane",
"People_Boarded_per_1_Minute_Intervals",
"People_Unboarded_per_1_Minute_Intervals",
"Scatter_Plot_of_Time_Differences",
"Scatter_Plot_of_People_Boarded",
"Scatter_Plot_of_People_Unboarded",
"Scatter_Plot_of_Time_in_Stop"
)
plot_objects <- list(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, pl13, pl14, pl15, pl16, pl17, pl18, pl19, pl20, pl21, pl22, pl23, pl24, pl25, pl26, pl27, pl28, pl29, pl30, pl31, pl32, pl33)
# Call the function
convert_and_save_plots(plot_objects, plot_names, output_directory)
####Interactive Plots####
# Define the function
convert_and_save_plots <- function(plot_objects, plot_names, output_dir) {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Check if plot_names matches the number of plot objects
if (length(plot_objects) != length(plot_names)) {
stop("The number of plot objects must match the number of plot names.")
}
# Loop through each plot object
for (i in seq_along(plot_objects)) {
plot <- plot_objects[[i]]
name <- plot_names[i]
# Check if it's a pie chart (using coord_polar)
if (inherits(plot, "gg") && "coord_polar" %in% class(plot$coordinates)) {
# Handle pie chart manually
# Transform ggplot pie chart to plotly pie chart
# Get the data from the ggplot object
plot_data <- plot$data
plot_data <- plot_data[!is.na(plot_data$fill), ]  # Remove NA in the fill variable
# Create a plotly pie chart
interactive_plot <- plot_ly(
data = plot_data,
labels = plot_data$fill,
values = plot_data$count,  # Use the count or whatever variable holds the pie values
type = 'pie'
)
} else {
# For other types of ggplot objects, convert directly to plotly
interactive_plot <- ggplotly(plot)
}
# Correctly create file path without folders
file_name <- file.path(output_dir, paste0(name, ".html"))
# Ensure the path is formatted correctly for your OS
file_name <- normalizePath(file_name, winslash = "/", mustWork = FALSE)
# Save the interactive plot as an HTML file
htmlwidgets::saveWidget(as_widget(interactive_plot), file = file_name, selfcontained = TRUE)
}
}
# Define the output directory
output_directory <- "E:/University/9ο ΕΞΑΜΗΝΟ/ΣΥΣΤΗΜΑΤΑ ΑΣΤΙΚΩΝ ΣΥΓΚΟΙΝΩΝΙΩΝ/ERGASIA EKSAMHNOU/Final_SAS_B_G_G_K_Repo/Final_SAS_B_G_G_K/Data_Analysis/Plots/Interactive_Plots"
# Define plot names
plot_names <- c(
"Total_Number_of_People_Boarded_vs_Unboarded",
"Average_Number_of_People_Boarded_vs_Unboarded",
"Distribution_of_People_Boarded_and_Unboarded",
"Max_People_Boarded_Per_Bus_Line",
"Average_People_Boarded_Per_Bus_Line",
"Sum_of_People_Boarded_per_Bus_Line",
"Box_Plot_of_People_Boarded_per_Line",
"Max_People_Unboarded_per_Bus_Line",
"Average_People_Unboarded_per_Bus_Line",
"Sum_of_People_Unboarded_per_Bus_Line",
"Box_Plot_of_People_Unboarded_per_Line",
"Average_Time_per_Stop_per_Bus_Line",
"Max_Time_per_Stop_per_Bus_Line",
"Total_Time_per_Stop_per_Bus_Line",
"Number_of_Skips_per_Bus_Line",
"Number_of_Buses",
"Frequency_per_Bus_Line",
"Time_Distance_per_Bus_Line",
"Bus_Count_per_Bus_Line",
"Sum_of_Absolute_Time_Difference_per_Bus_Line",
"Average_Speed_per_Bus_Line",
"Total_Distance_per_Bus_Line",
"Total_Cycle_Time_per_Bus_Line",
"Bus_Count_per_Line_via_Tcycle",
"Total_Time_Break_per_Bus_Line",
"Parked_Car",
"Bus_Lane",
"People_Boarded_per_1_Minute_Intervals",
"People_Unboarded_per_1_Minute_Intervals",
"Scatter_Plot_of_Time_Differences",
"Scatter_Plot_of_People_Boarded",
"Scatter_Plot_of_People_Unboarded",
"Scatter_Plot_of_Time_in_Stop"
)
plot_objects <- list(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, pl13, pl14, pl15, pl16, pl17, pl18, pl19, pl20, pl21, pl22, pl23, pl24, pl25, pl26, pl27, pl28, pl29, pl30, pl31, pl32, pl33)
# Call the function
convert_and_save_plots(plot_objects, plot_names, output_directory)
####Interactive Plots####
# Define the function
convert_and_save_plots <- function(plot_objects, plot_names, output_dir) {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Check if plot_names matches the number of plot objects
if (length(plot_objects) != length(plot_names)) {
stop("The number of plot objects must match the number of plot names.")
}
# Loop through each plot object
for (i in seq_along(plot_objects)) {
plot <- plot_objects[[i]]
name <- plot_names[i]
# Check if it's a pie chart (using coord_polar)
if ("coord_polar" %in% class(plot$coordinates)) {
# Handle pie chart manually
# Extract the data from the ggplot object
plot_data <- plot$data
# Remove missing data in fill and count (adjust as needed)
plot_data <- plot_data[!is.na(plot_data$fill), ]
# Create a plotly pie chart
interactive_plot <- plot_ly(
data = plot_data,
labels = plot_data$fill,        # The factor for pie slices (e.g., cyl)
values = table(plot_data$fill), # Frequency or counts for the slices
type = 'pie'
) %>% layout(title = name)
} else {
# For other types of ggplot objects, convert directly to plotly
interactive_plot <- ggplotly(plot)
}
# Correctly create file path without folders
file_name <- file.path(output_dir, paste0(name, ".html"))
# Ensure the path is formatted correctly for your OS
file_name <- normalizePath(file_name, winslash = "/", mustWork = FALSE)
# Save the interactive plot as an HTML file
htmlwidgets::saveWidget(as_widget(interactive_plot), file = file_name, selfcontained = TRUE)
}
}
# Define the output directory
output_directory <- "E:/University/9ο ΕΞΑΜΗΝΟ/ΣΥΣΤΗΜΑΤΑ ΑΣΤΙΚΩΝ ΣΥΓΚΟΙΝΩΝΙΩΝ/ERGASIA EKSAMHNOU/Final_SAS_B_G_G_K_Repo/Final_SAS_B_G_G_K/Data_Analysis/Plots/Interactive_Plots"
# Define plot names
plot_names <- c(
"Total_Number_of_People_Boarded_vs_Unboarded",
"Average_Number_of_People_Boarded_vs_Unboarded",
"Distribution_of_People_Boarded_and_Unboarded",
"Max_People_Boarded_Per_Bus_Line",
"Average_People_Boarded_Per_Bus_Line",
"Sum_of_People_Boarded_per_Bus_Line",
"Box_Plot_of_People_Boarded_per_Line",
"Max_People_Unboarded_per_Bus_Line",
"Average_People_Unboarded_per_Bus_Line",
"Sum_of_People_Unboarded_per_Bus_Line",
"Box_Plot_of_People_Unboarded_per_Line",
"Average_Time_per_Stop_per_Bus_Line",
"Max_Time_per_Stop_per_Bus_Line",
"Total_Time_per_Stop_per_Bus_Line",
"Number_of_Skips_per_Bus_Line",
"Number_of_Buses",
"Frequency_per_Bus_Line",
"Time_Distance_per_Bus_Line",
"Bus_Count_per_Bus_Line",
"Sum_of_Absolute_Time_Difference_per_Bus_Line",
"Average_Speed_per_Bus_Line",
"Total_Distance_per_Bus_Line",
"Total_Cycle_Time_per_Bus_Line",
"Bus_Count_per_Line_via_Tcycle",
"Total_Time_Break_per_Bus_Line",
"Parked_Car",
"Bus_Lane",
"People_Boarded_per_1_Minute_Intervals",
"People_Unboarded_per_1_Minute_Intervals",
"Scatter_Plot_of_Time_Differences",
"Scatter_Plot_of_People_Boarded",
"Scatter_Plot_of_People_Unboarded",
"Scatter_Plot_of_Time_in_Stop"
)
plot_objects <- list(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, pl13, pl14, pl15, pl16, pl17, pl18, pl19, pl20, pl21, pl22, pl23, pl24, pl25, pl26, pl27, pl28, pl29, pl30, pl31, pl32, pl33)
# Call the function
convert_and_save_plots(plot_objects, plot_names, output_directory)
####Interactive Plots####
# Define the function
convert_and_save_plots <- function(plot_objects, plot_names, output_dir) {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Check if plot_names matches the number of plot objects
if (length(plot_objects) != length(plot_names)) {
stop("The number of plot objects must match the number of plot names.")
}
# Loop through each plot object
for (i in seq_along(plot_objects)) {
plot <- plot_objects[[i]]
name <- plot_names[i]
# Check if it's a pie chart (using coord_polar)
if ("coord_polar" %in% class(plot$coordinates)) {
# Handle pie chart manually
# Extract the data from the ggplot object
plot_data <- plot$data
# Remove missing data in fill and count (adjust as needed)
plot_data <- plot_data[!is.na(plot_data$fill), ]
# Create a plotly pie chart
interactive_plot <- plot_ly(
data = plot_data,
labels = plot_data$fill,        # The factor for pie slices (e.g., cyl)
values = table(plot_data$fill), # Frequency or counts for the slices
type = 'pie'
) %>% layout(title = name)
} else {
# For other types of ggplot objects, convert directly to plotly
interactive_plot <- ggplotly(plot)
}
# Correctly create file path without folders
file_name <- file.path(output_dir, paste0(name, ".html"))
# Ensure the path is formatted correctly for your OS
file_name <- normalizePath(file_name, winslash = "/", mustWork = FALSE)
# Save the interactive plot as an HTML file
htmlwidgets::saveWidget(as_widget(interactive_plot), file = file_name, selfcontained = TRUE)
}
}
# Define the output directory
output_directory <- "E:/University/9ο ΕΞΑΜΗΝΟ/ΣΥΣΤΗΜΑΤΑ ΑΣΤΙΚΩΝ ΣΥΓΚΟΙΝΩΝΙΩΝ/ERGASIA EKSAMHNOU/Final_SAS_B_G_G_K_Repo/Final_SAS_B_G_G_K/Data_Analysis/Plots/Interactive_Plots"
# Define plot names
plot_names <- c(
"Total_Number_of_People_Boarded_vs_Unboarded",
"Average_Number_of_People_Boarded_vs_Unboarded",
"Distribution_of_People_Boarded_and_Unboarded",
"Max_People_Boarded_Per_Bus_Line",
"Average_People_Boarded_Per_Bus_Line",
"Sum_of_People_Boarded_per_Bus_Line",
"Box_Plot_of_People_Boarded_per_Line",
"Max_People_Unboarded_per_Bus_Line",
"Average_People_Unboarded_per_Bus_Line",
"Sum_of_People_Unboarded_per_Bus_Line",
"Box_Plot_of_People_Unboarded_per_Line",
"Average_Time_per_Stop_per_Bus_Line",
"Max_Time_per_Stop_per_Bus_Line",
"Total_Time_per_Stop_per_Bus_Line",
"Number_of_Skips_per_Bus_Line",
"Number_of_Buses",
"Frequency_per_Bus_Line",
"Time_Distance_per_Bus_Line",
"Bus_Count_per_Bus_Line",
"Sum_of_Absolute_Time_Difference_per_Bus_Line",
"Average_Speed_per_Bus_Line",
"Total_Distance_per_Bus_Line",
"Total_Cycle_Time_per_Bus_Line",
"Bus_Count_per_Line_via_Tcycle",
"Total_Time_Break_per_Bus_Line",
"Parked_Car",
"Bus_Lane",
"People_Boarded_per_1_Minute_Intervals",
"People_Unboarded_per_1_Minute_Intervals",
"Scatter_Plot_of_Time_Differences",
"Scatter_Plot_of_People_Boarded",
"Scatter_Plot_of_People_Unboarded",
"Scatter_Plot_of_Time_in_Stop"
)
plot_objects <- list(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, pl13, pl14, pl15, pl16, pl17, pl18, pl19, pl20, pl21, pl22, pl23, pl24, pl25, pl26, pl27, pl28, pl29, pl30, pl31, pl32, pl33)
# Call the function
convert_and_save_plots(plot_objects, plot_names, output_directory)
####Interactive Plots####
# Define the function
# Define the function
convert_and_save_plots <- function(plot_objects, plot_names, output_dir) {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Check if plot_names matches the number of plot objects
if (length(plot_objects) != length(plot_names)) {
stop("The number of plot objects must match the number of plot names.")
}
# Loop through each plot object
for (i in seq_along(plot_objects)) {
plot <- plot_objects[[i]]
name <- plot_names[i]
# Check if it's a pie chart (using coord_polar)
if ("coord_polar" %in% class(plot$coordinates)) {
# Handle pie chart manually
# Extract the data from the ggplot object
plot_data <- plot$data
# Remove missing data in the fill (adjust as needed)
plot_data <- plot_data[!is.na(plot_data$fill), ]
# Create a plotly pie chart
interactive_plot <- plot_ly(
data = plot_data,
labels = plot_data$fill,        # The factor for pie slices (e.g., cyl)
values = table(plot_data$fill), # Frequency or counts for the slices
type = 'pie'
) %>% layout(title = name)
} else {
# For other types of ggplot objects, convert directly to plotly
interactive_plot <- ggplotly(plot)
}
# Correctly create file path without folders
file_name <- file.path(output_dir, paste0(name, ".html"))
# Ensure the path is formatted correctly for your OS
file_name <- normalizePath(file_name, winslash = "/", mustWork = FALSE)
# Save the interactive plot as an HTML file
htmlwidgets::saveWidget(as_widget(interactive_plot), file = file_name, selfcontained = TRUE)
}
}
# Define the output directory
output_directory <- "E:/University/9ο ΕΞΑΜΗΝΟ/ΣΥΣΤΗΜΑΤΑ ΑΣΤΙΚΩΝ ΣΥΓΚΟΙΝΩΝΙΩΝ/ERGASIA EKSAMHNOU/Final_SAS_B_G_G_K_Repo/Final_SAS_B_G_G_K/Data_Analysis/Plots/Interactive_Plots"
# Define the output directory
output_directory <- "E:/University/9ο ΕΞΑΜΗΝΟ/ΣΥΣΤΗΜΑΤΑ ΑΣΤΙΚΩΝ ΣΥΓΚΟΙΝΩΝΙΩΝ/ERGASIA EKSAMHNOU/Final_SAS_B_G_G_K_Repo/Final_SAS_B_G_G_K/Data_Analysis/Plots/Interactive_Plots"
# Define plot names
plot_names <- c(
"Total_Number_of_People_Boarded_vs_Unboarded",
"Average_Number_of_People_Boarded_vs_Unboarded",
"Distribution_of_People_Boarded_and_Unboarded",
"Max_People_Boarded_Per_Bus_Line",
"Average_People_Boarded_Per_Bus_Line",
"Sum_of_People_Boarded_per_Bus_Line",
"Box_Plot_of_People_Boarded_per_Line",
"Max_People_Unboarded_per_Bus_Line",
"Average_People_Unboarded_per_Bus_Line",
"Sum_of_People_Unboarded_per_Bus_Line",
"Box_Plot_of_People_Unboarded_per_Line",
"Average_Time_per_Stop_per_Bus_Line",
"Max_Time_per_Stop_per_Bus_Line",
"Total_Time_per_Stop_per_Bus_Line",
"Number_of_Skips_per_Bus_Line",
"Number_of_Buses",
"Frequency_per_Bus_Line",
"Time_Distance_per_Bus_Line",
"Bus_Count_per_Bus_Line",
"Sum_of_Absolute_Time_Difference_per_Bus_Line",
"Average_Speed_per_Bus_Line",
"Total_Distance_per_Bus_Line",
"Total_Cycle_Time_per_Bus_Line",
"Bus_Count_per_Line_via_Tcycle",
"Total_Time_Break_per_Bus_Line",
"Parked_Car",
"Bus_Lane",
"People_Boarded_per_1_Minute_Intervals",
"People_Unboarded_per_1_Minute_Intervals",
"Scatter_Plot_of_Time_Differences",
"Scatter_Plot_of_People_Boarded",
"Scatter_Plot_of_People_Unboarded",
"Scatter_Plot_of_Time_in_Stop"
)
plot_objects <- list(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, pl13, pl14, pl15, pl16, pl17, pl18, pl19, pl20, pl21, pl22, pl23, pl24, pl25, pl26, pl27, pl28, pl29, pl30, pl31, pl32, pl33)
# Call the function
convert_and_save_plots(plot_objects, plot_names, output_directory)
####Interactive Plots####
# Define the function
# Define the function
# Define the function
convert_and_save_plots <- function(plot_objects, plot_names, output_dir) {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Check if plot_names matches the number of plot objects
if (length(plot_objects) != length(plot_names)) {
stop("The number of plot objects must match the number of plot names.")
}
# Loop through each plot object
for (i in seq_along(plot_objects)) {
plot <- plot_objects[[i]]
name <- plot_names[i]
# Check if it's a pie chart (using coord_polar)
if ("coord_polar" %in% class(plot$coordinates)) {
# Handle pie chart manually
# Extract the data from the ggplot object
plot_data <- plot$data
# Remove missing data in the fill (adjust as needed)
plot_data <- plot_data[!is.na(plot_data$fill), ]
# Create a plotly pie chart using plot_ly
interactive_plot <- plot_ly(
data = plot_data,
labels = plot_data$fill,        # The factor for pie slices (e.g., cyl)
values = table(plot_data$fill), # Frequency or counts for the slices
type = 'pie'
) %>% layout(title = name)
} else {
# For other types of ggplot objects, convert directly to plotly
interactive_plot <- ggplotly(plot)
}
# Correctly create file path without folders
file_name <- file.path(output_dir, paste0(name, ".html"))
# Ensure the path is formatted correctly for your OS
file_name <- normalizePath(file_name, winslash = "/", mustWork = FALSE)
# Save the interactive plot as an HTML file
htmlwidgets::saveWidget(as_widget(interactive_plot), file = file_name, selfcontained = TRUE)
}
}
# Define the output directory
output_directory <- "E:/University/9ο ΕΞΑΜΗΝΟ/ΣΥΣΤΗΜΑΤΑ ΑΣΤΙΚΩΝ ΣΥΓΚΟΙΝΩΝΙΩΝ/ERGASIA EKSAMHNOU/Final_SAS_B_G_G_K_Repo/Final_SAS_B_G_G_K/Data_Analysis/Plots/Interactive_Plots"
# Define plot names
plot_names <- c(
"Total_Number_of_People_Boarded_vs_Unboarded",
"Average_Number_of_People_Boarded_vs_Unboarded",
"Distribution_of_People_Boarded_and_Unboarded",
"Max_People_Boarded_Per_Bus_Line",
"Average_People_Boarded_Per_Bus_Line",
"Sum_of_People_Boarded_per_Bus_Line",
"Box_Plot_of_People_Boarded_per_Line",
"Max_People_Unboarded_per_Bus_Line",
"Average_People_Unboarded_per_Bus_Line",
"Sum_of_People_Unboarded_per_Bus_Line",
"Box_Plot_of_People_Unboarded_per_Line",
"Average_Time_per_Stop_per_Bus_Line",
"Max_Time_per_Stop_per_Bus_Line",
"Total_Time_per_Stop_per_Bus_Line",
"Number_of_Skips_per_Bus_Line",
"Number_of_Buses",
"Frequency_per_Bus_Line",
"Time_Distance_per_Bus_Line",
"Bus_Count_per_Bus_Line",
"Sum_of_Absolute_Time_Difference_per_Bus_Line",
"Average_Speed_per_Bus_Line",
"Total_Distance_per_Bus_Line",
"Total_Cycle_Time_per_Bus_Line",
"Bus_Count_per_Line_via_Tcycle",
"Total_Time_Break_per_Bus_Line",
"Parked_Car",
"Bus_Lane",
"People_Boarded_per_1_Minute_Intervals",
"People_Unboarded_per_1_Minute_Intervals",
"Scatter_Plot_of_Time_Differences",
"Scatter_Plot_of_People_Boarded",
"Scatter_Plot_of_People_Unboarded",
"Scatter_Plot_of_Time_in_Stop"
)
plot_objects <- list(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, pl13, pl14, pl15, pl16, pl17, pl18, pl19, pl20, pl21, pl22, pl23, pl24, pl25, pl26, pl27, pl28, pl29, pl30, pl31, pl32, pl33)
# Call the function
convert_and_save_plots(plot_objects, plot_names, output_directory)
